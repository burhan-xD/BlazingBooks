@inject NavigationManager NavigationManager
@inject IBookService BookService
@inject ICommonService CommonService

<PageTitle>@_book?.Title | Blazing Books</PageTitle>

<SectionContent SectionName="PageTitle">
    @if (CommonService.IsWeb)
    {
        <h1 class="m-0 text-white fw-bold">@_book?.Title - Book Description</h1>
    }
    else
    {
        <span>@_book?.Title</span>
    }
</SectionContent>

@if (_book is not null)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-sm-4 d-flex flex-column align-items-center">
                <div class="image-wrapper">
                    <img src="@_book.Image" alt="@_book.Title" class="img-responsive" />
                </div>
                <div class="my-4">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">Book Id</th>
                                <td>@_book.Id</td>
                            </tr>
                            <tr>
                                <th scope="row">Format</th>
                                <td>@_book.Format</td>
                            </tr>
                            <tr>
                                <th scope="row">No. of Pages</th>
                                <td>@_book.NumPages</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <a href="@_book.BookLink" target="_blank" class="btn btn-book fab mb-4">
                    @(string.IsNullOrWhiteSpace(_book.BuyLink) ? "Read More" : "Buy Now")
                </a>

            </div>
            <div class="col-sm-8">
                <h2 class="fw-bold">@_book.Title</h2>
                <h5 class="mt-3">
                    <span>by</span>
                    <a href="/authors/@_book.Author.Slug/books" title="Books by @_book.Author.Name" class="text-secondary fw-bold">
                        @_book.Author.Name
                    </a>
                </h5>
                <hr />
                <h3 class="my-3">Description</h3>
                <p class="">
                    @_book.Description
                </p>

                <h4 class="my-3">Genres</h4>
                <div class="d-flex flex-wrap">
                    @foreach (var g in _book.Genres)
                    {
                        <a href="/?genre=@g.Slug" class="genre-tag" title="@g.Name Books">@g.Name</a>
                    }
                </div>

                <hr style="height: 5px" class="text-main" />
                <h4>Similar Books</h4>

                <div class="row">
                    @foreach (var b in _similarBooks)
                    {
                        <div class="col-6 col-sm-4 mb-4">
                            <a href="/books/@b.Id" title="@b.Title">
                                <div class="d-flex flex-column justify-content-center align-items-center bg-light p-2">
                                    <img src="@b.Image" alt="@b.Title" class="img-fluid similar-book-img" />
                                    <label class="text-truncate mt-2 similar-book-title">@b.Title</label>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}



@code {
    [Parameter, EditorRequired]
    public int BookId { get; set; }

    private BookDetailsDto _book;
    private BookListDto[] _similarBooks = [];

    protected override async Task OnInitializedAsync()
    {
        if (BookId <= 0)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        var similarBooksTask = BookService.GetSimilarBooksAsync(BookId, 6);
        _book = await BookService.GetBookAsync(BookId);
        _similarBooks = await similarBooksTask;

        if (_book is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
    }
}


@* var similarBooksTask = BookService.GetSimilarBooksAsync(BookId, 6);
        _book = await BookService.GetBookAsync(BookId);
        _similarBooks = await similarBooksTask;

Copilot:
    Bu iyi bir soru! “var similarBooksTask” değişkeni, benzer kitapları asenkron olarak almak için bir görev (task) oluşturur. Bu yaklaşım, verilerin yüklendiği sırada diğer işlemlerin devam etmesine izin verir. Yani, _similarBooks dizisini doldurmadan önce benzer kitapları almak için bir araç olarak kullanılır. Bu, uygulamanın daha hızlı ve daha duyarlı olmasına yardımcı olabilir. Ayrıca, asenkron işlemler, kullanıcı arayüzünün donmamasını sağlar. Yani, bu yöntem performans ve kullanıcı deneyimi açısından daha iyi bir seçenek olabilir.
ChatGpt:
var similarBooksTask" değişkeni, "GetSimilarBooksAsync" metodu çağrıldığında dönen görevi temsil eder. Kod, bu görevin sonucunu beklerken başka işlemleri yapmaya devam edebilir. Bu nedenle, görevi başlatmak ve ardından sonucunu beklemek için bir değişken kullanılır.

Bu durumda, _similarBooks alanını doldurmak için GetSimilarBooksAsync yöntemi çağrılır ve bu yöntem bir görev döndürür. await anahtar kelimesi kullanılarak bu görevin sonucu beklenir ve ardından _similarBooks alanına atılır.

Eğer _similarBooks alanını doğrudan BookService.GetSimilarBooksAsync(BookId, 6) ile doldurursanız, GetBookAsync(BookId) metodunun sonucunu beklerken GetSimilarBooksAsync metodunun tamamlanmasını bekleyemezsiniz. Bu, her iki işlemi paralel olarak gerçekleştirmek yerine sırayla gerçekleştirir ve kodunuzun performansını düşürebilir. Bu nedenle, GetSimilarBooksAsync yönteminin dönüş değeri var similarBooksTask değişkeninde saklanır ve bu görevin sonucunu beklerken diğer işlemler devam eder. *@